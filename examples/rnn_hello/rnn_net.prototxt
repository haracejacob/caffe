name: "EXAMPLE_RNN_NET"
layer {
  name: "data"
  type: "HDF5Data"
  top: "data"
  top: "label"
  top: "clip"
  hdf5_data_param {
    source: "rnn_data.filelist.txt"
    batch_size: 4
  }
}
layer {
  name: "rnn1"
  type: "RNN"
  bottom: "data"
  bottom: "clip"
  top: "rnn1"
  recurrent_param {
    num_output: 10 # We need to have some positive and some negative initial weights with high probability
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "xavier"
    }
    expose_hidden:0
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "rnn1"
  top: "rnn1"
}
layer {
  name: "ip"
  type: "InnerProduct"
  bottom: "rnn1"
  top: "ip"
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip"
  bottom: "label"
  top: "loss"
  include {
    phase: TRAIN
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TRAIN
  }
}
layer {
  name: "prob"
  type: "Softmax"
  bottom: "ip"
  top: "prob"
  include {
    phase: TEST
  }
}
layer {
  name: "argmax"
  type: "ArgMax"
  bottom: "ip"
  top: "argmax"
  include {
    phase: TEST
  }
}
